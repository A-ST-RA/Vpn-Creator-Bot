import { message } from 'telegraf/filters';
import { Telegraf, Markup, Context } from 'telegraf';

import { appConfig } from './config'
import { getHelpContent, getHowToVpnText, getMainText, getPriceList, getWelcomeText } from './text/text.service';
import { createApplication } from './applications/applications.service';

const bot = new Telegraf(appConfig.tgBotApi);

bot.start(async (ctx) => {
  const keyboard = Markup.inlineKeyboard([
    Markup.button.callback('üëâ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main'),
  ]);
  
  const wellcomeText = await getWelcomeText();

  ctx.telegram.sendMessage(
    ctx.from?.id || 0,
    wellcomeText,
    {
      ...keyboard,
      parse_mode: 'HTML',
      disable_web_page_preview: true,
    },
  );
});

bot.action('main', async (ctx: Context) => {
  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('‚úÖ –ü–æ–¥–∫–ª—é—á–∏—Ç—å VPN', 'connect')],
    [Markup.button.callback('‚ùì –ü–æ–º–æ—â—å', 'help')],
    [Markup.button.callback('üìú –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∑–∞–ø—É—Å–∫—É VPN', 'howToVpn')],
  ]);
  
  const mainText = await getMainText();
  
  ctx.telegram.sendMessage(
    ctx.from?.id || 0,
    mainText,
    {
      ...keyboard,
      parse_mode: 'HTML',
      disable_web_page_preview: true,
    },
  );
});

bot.action('help', async (ctx: Context) => {
  const {helpText, helpLink} = await getHelpContent();
  
  const keyboard = Markup.inlineKeyboard([
    [Markup.button.url('ü§µ‚Äç‚ôÇÔ∏è –ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏', helpLink)],
    [Markup.button.callback('üëâ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main')],
  ]);
  
  ctx.telegram.sendMessage(
    ctx.from?.id || 0,
    helpText,
    {
      ...keyboard,
      parse_mode: 'HTML',
      disable_web_page_preview: true,
    },
  );
});

bot.action('howToVpn', async (ctx: Context) => {
  const keyboard = Markup.inlineKeyboard([
    [Markup.button.url('üì± WireGuard –¥–ª—è Android', 'https://play.google.com/store/apps/details?id=com.wireguard.android&hl=ru&gl=US&pli=1')],
    [Markup.button.url('üçé WireGuard –¥–ª—è Iphone', 'https://apps.apple.com/ru/app/wireguard/id1441195209')],
    [Markup.button.callback('üëâ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main')],
  ]);
  
  const howToVpnText = await getHowToVpnText();
  
  ctx.telegram.sendMessage(
    ctx.from?.id || 0,
    howToVpnText,
    {
      ...keyboard,
      parse_mode: 'HTML',
      disable_web_page_preview: true,
    },
  );
});


bot.on(message('document'), (ctx) => {
  const fromId = ctx.from.id;

  ctx.reply('–ß–µ–∫ –ø–æ–ª—É—á–µ–Ω, –æ–∂–∏–¥–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏')
})

bot.action(/buy /, async (ctx: any) => {
  const userId = ctx.callbackQuery.from.id;
  const [period, cost] = ctx.callbackQuery.data.split(' ')[1].split(',');

  const result = await createApplication(userId, period, cost);
  if (result) {
    ctx.reply('–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –ø–æ –æ–ø–ª–∞—Ç–µ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–∞–Ω–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞');
    return;
  }

  ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ');
});

bot.action('connect', async (ctx) => {
  const priceList = await getPriceList();
  
  const buyKeyboardData = priceList?.map((el, idx) => {
    let text = `${el.duration} –º–µ—Å: ${el.cost} ‚ÇΩ/–º–µ—Å`;
    let callback = `buy ${el.duration},${el.cost}`;

    if (idx === 0) {
      text = `üåü ${text}`;
    }

    return [Markup.button.callback(text, callback)];
  })

  const keyboard = Markup.inlineKeyboard([
    ...buyKeyboardData as any,
    [Markup.button.callback('üëâ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main')],
  ]);

  ctx.telegram.sendMessage(
    ctx.from?.id || 0,
    '–ß–µ–º –±–æ–ª—å—à–µ —Å—Ä–æ–∫, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø–æ–∫—É–ø–∞–µ—Ç–µ <strong>–ù–∞–∑–≤–∞–Ω–∏–µ –í–∞—à–µ–≥–æ –ë–æ—Ç–∞</strong>, —Ç–µ–º –±–æ–ª—å—à–µ –≤—ã–≥–æ–¥–∞',
    {
      ...keyboard,
      parse_mode: 'HTML',
      disable_web_page_preview: true,
    },
  );
});

bot.launch()

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));